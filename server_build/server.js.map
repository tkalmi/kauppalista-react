{"version":3,"sources":["../server/server.js"],"names":["bodyParser","process","env","NODE_ENV","require","sourceMaps","PWD","cwd","port","PORT","Promise","connect","MONGODB_URI","then","console","log","catch","err","error","app","server","Server","io","webpack","webpackConfig","compiler","use","noInfo","publicPath","output","json","urlencoded","extended","static","join","on","socket","listID","handshake","headers","referer","split","pop","action","listen"],"mappings":"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","file":"server.js","sourcesContent":["// DEVELOPMENT SPECIFIC STUFF\r\nif (process.env.NODE_ENV !== 'production') {\r\n    require('babel-register')({\r\n        sourceMaps: true\r\n    });\r\n}\r\n\r\n// SET PWD TO REPLACE __dirname FOR HEROKU ================\r\nprocess.env.PWD = process.cwd();\r\n\r\nimport express from 'express';\r\nimport morgan from 'morgan';\r\nimport * as bodyParser from 'body-parser';\r\nimport mongoose from 'mongoose';\r\nimport {\r\n    Promise\r\n} from 'bluebird';\r\nimport fs from 'fs';\r\nimport url from 'url';\r\nimport path from 'path';\r\nimport favicon from 'serve-favicon';\r\nimport SocketIO from 'socket.io';\r\nimport http from 'http';\r\nimport Item from './models/Item';\r\nimport ShoppingList from './models/ShoppingList';\r\nimport { socketActions, socketOnConnection } from './utils/socketHelpers';\r\n\r\nimport router from './routes/index';\r\n\r\n\r\n// CONFIG ENVIREONMENT CONSTANTS ===================\r\nconst port = process.env.PORT || 3000;\r\n\r\n// DATABASE CONFIG =================================\r\nmongoose.Promise = Promise; // Mongoose's promise is deprecated\r\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/testiredux')\r\n    .then(() => console.log('Database connection successful!'))\r\n    .catch((err) => console.error(err));\r\n\r\nconst app = express();\r\nconst server = http.Server(app);\r\nconst io = new SocketIO(server);\r\n\r\n// DEVELOPMENT ENVIRONMENT STUFF (WEBPACK HMR) =========\r\nif (process.env.NODE_ENV !== 'production') {\r\n    const webpack = require('webpack');\r\n    const webpackConfig = require('../webpack.config');\r\n    var compiler = webpack(webpackConfig);\r\n    app.use(require('webpack-dev-middleware')(compiler, {\r\n        noInfo: true, // if true, then only warnings and errors are displayed\r\n        publicPath: webpackConfig.output.publicPath\r\n    }));\r\n    app.use(require('webpack-hot-middleware')(compiler));\r\n}\r\n\r\n// EXPRESS MIDDLEWARE =================================\r\napp.use(morgan('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: false\r\n}));\r\napp.use(express.static(path.join(process.env.PWD, 'static'))); // Use static folder as the root for static files\r\napp.use(favicon(path.join(process.env.PWD, 'static', 'favicon.ico')));\r\n\r\n// ROUTES =============================================\r\napp.use('/', router);\r\n\r\n// SOCKET.IO CONFIGURATION ============================\r\nio.on('connection', (socket) => {\r\n\r\n    // extract listID from client URL\r\n    let listID = socket.handshake.headers.referer.split('/').pop();\r\n\r\n    if (listID) {\r\n        // New client connects\r\n        console.log('[INFO]: New connection established to list ' + listID);\r\n        socketOnConnection(socket, listID) // set list for new connection\r\n\r\n        // Client sends an action\r\n        socket.on('action', (action) => {\r\n            socketActions(socket, listID, action, io) // handle various actions\r\n        })\r\n\r\n        socket.on('disconnect', () => {\r\n          console.log('[INFO]: Connection dropped from list ' + listID);\r\n        })\r\n\r\n    }\r\n});\r\n\r\n// START THE SERVER ===================================\r\nserver.listen(port, () => {\r\n    console.log('[INFO] Listening on *:' + port);\r\n});\r\n"]}
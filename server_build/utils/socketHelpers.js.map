{"version":3,"sources":["../../server/utils/socketHelpers.js"],"names":["socketActions","socketOnConnection","socket","listID","action","io","type","name","quantity","unit","additionalInfo","save","then","newItem","console","log","emit","to","findByIdAndUpdate","$push","_id","new","catch","err","error","findById","populate","path","match","archived","deleted","list","item","bought","idArr","items","map","update","$in","$set","multi","promise","res","redirect","join"],"mappings":"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","file":"socketHelpers.js","sourcesContent":["import {\r\n    Item,\r\n    ShoppingList\r\n} from '../models/index';\r\n\r\nimport {\r\n    Promise\r\n} from 'bluebird'\r\n\r\n\r\n/**\r\n * Handles Redux actions arriving via socket connection\r\n * @parameter socket - socket instance for the client that sent the action\r\n * @parameter listID - ObjectId of the list that's concerned with the action\r\n * @parameter action - Redux action object\r\n * @parameter io - server's socket.io instance\r\n */\r\nexport function socketActions(socket, listID, action, io) {\r\n\r\n    switch (action.type) {\r\n        case 'SEND_ITEM_TO_SERVER':\r\n            // Adds an item to list\r\n            new Item({\r\n                    name: action.name,\r\n                    quantity: action.quantity,\r\n                    unit: action.unit,\r\n                    additionalInfo: action.additionalInfo\r\n                }).save()\r\n                .then((newItem) => {\r\n                    console.log(`[INFO]: Item ${newItem.name} saved to list ${listID}`)\r\n                    socket.emit('hide_spinner');\r\n                    io.to(listID).emit('add_item', newItem);\r\n                    return newItem\r\n                }).then((newItem) => {\r\n                    return ShoppingList.findByIdAndUpdate(listID, {\r\n                        $push: {\r\n                            'items': newItem._id\r\n                        }\r\n                    }, {\r\n                        new: true\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    console.error(err)\r\n                })\r\n            break;\r\n        case 'GET_LIST_FROM_SERVER':\r\n            // Gets list by ObjectId\r\n            ShoppingList.findById(action.listID).populate({\r\n                    path: 'items',\r\n                    match: {\r\n                        archived: false,\r\n                        deleted: false\r\n                    }\r\n                })\r\n                .then((list) => {\r\n                    socket.emit('set_list', list);\r\n                })\r\n                .catch(err => {\r\n                    console.log('Something went wrong while fetching list for ' + listID);\r\n                    console.error(err)\r\n                    socket.emit('show_error', 'Syöttämäsi osoite ei vastannut yhtään listaa.')\r\n                });\r\n            break;\r\n        case 'UPDATE_ITEM':\r\n            // Updates a specific item\r\n            Item.findById(action.item._id).then((item) => {\r\n                item.name = typeof action.item.name !== 'undefined' ? action.item.name : item.name;\r\n                item.quantity = typeof action.item.quantity !== 'undefined' ? action.item.quantity : item.quantity;\r\n                item.unit = typeof action.item.unit !== 'undefined' ? action.item.unit : item.unit;\r\n                item.additionalInfo = typeof action.item.additionalInfo !== 'undefined' ? action.item.additionalInfo : item.additionalInfo;\r\n                item.archived = typeof action.item.archived !== 'undefined' ? action.item.archived : item.archived;\r\n                item.bought = typeof action.item.bought !== 'undefined' ? action.item.bought : item.bought;\r\n                item.deleted = typeof action.item.deleted !== 'undefined' ? action.item.deleted : item.deleted;\r\n\r\n                return item.save();\r\n            }).then((item) => {\r\n                console.log(`[INFO]: Item ${item.name} updated in list ${listID}`)\r\n                io.to(listID).emit('update_item', item)\r\n            }).catch(err => {\r\n                console.error(err)\r\n                socket.emit('show_error', `Esinettä ${item.name} ei voitu päivittää tietokantaan. Yritä uudelleen!`)\r\n            })\r\n            break;\r\n        case 'ARCHIVE_ITEMS':\r\n            // Archives bought items\r\n            let idArr = action.items.map(item => (item._id))\r\n            Item.update({\r\n                    _id: {\r\n                        $in: idArr\r\n                    }\r\n                }, {\r\n                    $set: {\r\n                        archived: true\r\n                    }\r\n                }, {\r\n                    multi: true\r\n                })\r\n                .then(() => {\r\n                    let promise = ShoppingList.findById(listID).populate({\r\n                        path: 'items',\r\n                        match: {\r\n                            archived: false,\r\n                            deleted: false\r\n                        }\r\n                    })\r\n                    return promise\r\n                })\r\n                .then((list) => {\r\n                    io.to(listID).emit('set_list', list);\r\n                    socket.emit('hide_spinner');\r\n                })\r\n                .catch(err => {\r\n                    console.log('Something went wrong while archiving items for list ' + listID);\r\n                    console.error(err)\r\n                    socket.emit('show_error', 'Jotakin meni pieleen. Lataa sivu uudelleen ja toivo parasta!')\r\n                });\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Sets client's list on connection\r\n * @parameter socket - socket instance for the client\r\n * @parameter listID - ObjectId of the list the client is spectating\r\n */\r\nexport function socketOnConnection(socket, listID) {\r\n    ShoppingList.findById(listID).populate({\r\n            path: 'items',\r\n            match: {\r\n                archived: false,\r\n                deleted: false\r\n            }\r\n        })\r\n        .then((list) => {\r\n            // if list was not found, redirect to front page\r\n            if (!list) {\r\n                return res.redirect('/');\r\n            }\r\n            socket.join(listID); // join to shoppinglist's socket room\r\n            socket.emit('set_list', list) // set the new connection's current state\r\n        }).catch(err => {\r\n            console.log('Something went wrong while fetching list for ' + listID);\r\n            console.error(err)\r\n            socket.emit('show_error', 'Syöttämäsi osoite ei vastannut yhtään listaa.')\r\n        });\r\n}\r\n"]}